// <auto-generated />
using System;
using Apprenticeship.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Apprenticeship.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240915065646_businessLayer")]
    partial class businessLayer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Apprenticeship.Entites.Assignment", b =>
                {
                    b.Property<int>("assignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assignmentId"));

                    b.Property<string>("assignmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("assignmentNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("assignmentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("traningId")
                        .HasColumnType("int");

                    b.HasKey("assignmentId");

                    b.HasIndex("traningId");

                    b.ToTable("assignments");
                });

            modelBuilder.Entity("Apprenticeship.Entites.AssignmentObjective", b =>
                {
                    b.Property<int>("assignmentId")
                        .HasColumnType("int");

                    b.Property<int>("objectiveId")
                        .HasColumnType("int");

                    b.HasKey("assignmentId", "objectiveId");

                    b.HasIndex("objectiveId");

                    b.ToTable("assignmentObjectives");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Company", b =>
                {
                    b.Property<int>("companyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("companyId"));

                    b.Property<string>("companyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("companyId");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Objective", b =>
                {
                    b.Property<int>("objectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("objectiveId"));

                    b.Property<string>("objectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("objectiveId");

                    b.ToTable("objectives");
                });

            modelBuilder.Entity("Apprenticeship.Entites.ObjectiveSkills", b =>
                {
                    b.Property<int>("objectiveId")
                        .HasColumnType("int");

                    b.Property<int>("skillId")
                        .HasColumnType("int");

                    b.HasKey("objectiveId", "skillId");

                    b.HasIndex("skillId");

                    b.ToTable("objectiveSkills");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("secondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thirdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Apprenticeship.Entites.Report", b =>
                {
                    b.Property<int>("reportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reportId"));

                    b.Property<int>("assignmentId")
                        .HasColumnType("int");

                    b.Property<string>("reportDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reportNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reportStatusId")
                        .HasColumnType("int");

                    b.HasKey("reportId");

                    b.HasIndex("assignmentId");

                    b.HasIndex("reportStatusId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("Apprenticeship.Entites.ReportStatus", b =>
                {
                    b.Property<int>("reportStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reportStatusId"));

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("reportStatusId");

                    b.ToTable("reportStatuses");
                });

            modelBuilder.Entity("Apprenticeship.Entites.School", b =>
                {
                    b.Property<int>("schoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("schoolId"));

                    b.Property<string>("schoolAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("schoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("schoolId");

                    b.ToTable("schools");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Skill", b =>
                {
                    b.Property<int>("skillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("skillId"));

                    b.Property<string>("skillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("skillId");

                    b.ToTable("skills");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Traning", b =>
                {
                    b.Property<int>("TraningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraningId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("schoolSupervisorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("studentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("teamLeaderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TraningId");

                    b.HasIndex("schoolSupervisorId");

                    b.HasIndex("studentId");

                    b.HasIndex("teamLeaderId");

                    b.ToTable("tranings");
                });

            modelBuilder.Entity("Apprenticeship.Entites.TraningObjective", b =>
                {
                    b.Property<int>("traningId")
                        .HasColumnType("int");

                    b.Property<int>("objectiveId")
                        .HasColumnType("int");

                    b.HasKey("traningId", "objectiveId");

                    b.HasIndex("objectiveId");

                    b.ToTable("traningObjectives");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Apprenticeship.Entites.SchoolSupervisor", b =>
                {
                    b.HasBaseType("Apprenticeship.Entites.Person");

                    b.Property<int>("schoolId")
                        .HasColumnType("int");

                    b.HasIndex("schoolId");

                    b.HasDiscriminator().HasValue("SchoolSupervisor");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Student", b =>
                {
                    b.HasBaseType("Apprenticeship.Entites.Person");

                    b.Property<string>("major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Apprenticeship.Entites.TeamLeader", b =>
                {
                    b.HasBaseType("Apprenticeship.Entites.Person");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.HasIndex("companyId");

                    b.HasDiscriminator().HasValue("TeamLeader");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Assignment", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Traning", "traning")
                        .WithMany("assignments")
                        .HasForeignKey("traningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("traning");
                });

            modelBuilder.Entity("Apprenticeship.Entites.AssignmentObjective", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Assignment", "assignment")
                        .WithMany("assignmentObjectives")
                        .HasForeignKey("assignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apprenticeship.Entites.Objective", "objective")
                        .WithMany("assignmentObjectives")
                        .HasForeignKey("objectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assignment");

                    b.Navigation("objective");
                });

            modelBuilder.Entity("Apprenticeship.Entites.ObjectiveSkills", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Objective", "objective")
                        .WithMany("objectiveSkills")
                        .HasForeignKey("objectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apprenticeship.Entites.Skill", "skill")
                        .WithMany("objectiveSkills")
                        .HasForeignKey("skillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("objective");

                    b.Navigation("skill");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Report", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Assignment", "assignment")
                        .WithMany("reports")
                        .HasForeignKey("assignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apprenticeship.Entites.ReportStatus", "reportStatus")
                        .WithMany("reports")
                        .HasForeignKey("reportStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assignment");

                    b.Navigation("reportStatus");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Traning", b =>
                {
                    b.HasOne("Apprenticeship.Entites.SchoolSupervisor", "schoolSupervisor")
                        .WithMany("apprenticeships")
                        .HasForeignKey("schoolSupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apprenticeship.Entites.Student", "student")
                        .WithMany("apprenticeships")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apprenticeship.Entites.TeamLeader", "teamLeader")
                        .WithMany("apprenticeships")
                        .HasForeignKey("teamLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("schoolSupervisor");

                    b.Navigation("student");

                    b.Navigation("teamLeader");
                });

            modelBuilder.Entity("Apprenticeship.Entites.TraningObjective", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Objective", "objective")
                        .WithMany("traningObjectives")
                        .HasForeignKey("objectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apprenticeship.Entites.Traning", "traning")
                        .WithMany("traningObjectives")
                        .HasForeignKey("traningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("objective");

                    b.Navigation("traning");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apprenticeship.Entites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Apprenticeship.Entites.SchoolSupervisor", b =>
                {
                    b.HasOne("Apprenticeship.Entites.School", "school")
                        .WithMany("schoolSupervisors")
                        .HasForeignKey("schoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("school");
                });

            modelBuilder.Entity("Apprenticeship.Entites.TeamLeader", b =>
                {
                    b.HasOne("Apprenticeship.Entites.Company", "company")
                        .WithMany("teamLeaders")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Assignment", b =>
                {
                    b.Navigation("assignmentObjectives");

                    b.Navigation("reports");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Company", b =>
                {
                    b.Navigation("teamLeaders");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Objective", b =>
                {
                    b.Navigation("assignmentObjectives");

                    b.Navigation("objectiveSkills");

                    b.Navigation("traningObjectives");
                });

            modelBuilder.Entity("Apprenticeship.Entites.ReportStatus", b =>
                {
                    b.Navigation("reports");
                });

            modelBuilder.Entity("Apprenticeship.Entites.School", b =>
                {
                    b.Navigation("schoolSupervisors");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Skill", b =>
                {
                    b.Navigation("objectiveSkills");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Traning", b =>
                {
                    b.Navigation("assignments");

                    b.Navigation("traningObjectives");
                });

            modelBuilder.Entity("Apprenticeship.Entites.SchoolSupervisor", b =>
                {
                    b.Navigation("apprenticeships");
                });

            modelBuilder.Entity("Apprenticeship.Entites.Student", b =>
                {
                    b.Navigation("apprenticeships");
                });

            modelBuilder.Entity("Apprenticeship.Entites.TeamLeader", b =>
                {
                    b.Navigation("apprenticeships");
                });
#pragma warning restore 612, 618
        }
    }
}
